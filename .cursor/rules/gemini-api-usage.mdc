---
description: 
globs: 
alwaysApply: false
---
# Gemini API 使用指南

## 概述
本规则基于 [Google AI官方文档](mdc:https:/ai.google.dev/gemini-api/docs?hl=zh-cn#rest) 提供Gemini API的正确使用方法。

## 支持的模型版本
- `gemini-2.0-flash` - 最新的多模态模型，具有新一代功能
- `gemini-1.5-flash` - 高性能多模态模型
- `gemini-1.5-pro` - 更强大的推理能力
- `gemini-pro` - 基础版本（兼容性最好）

## API调用方式

### 1. JavaScript/TypeScript (推荐)
使用官方SDK `@google/genai`：

```javascript
import { GoogleGenAI } from "@google/genai";

const ai = new GoogleGenAI({ apiKey: "YOUR_API_KEY" });

async function generateContent() {
  const response = await ai.models.generateContent({
    model: "gemini-2.0-flash",
    contents: "Your prompt here",
  });
  console.log(response.text);
}
```

### 2. REST API调用
直接使用fetch进行HTTP请求：

```javascript
const response = await fetch(
  `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`,
  {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      contents: [{
        parts: [{
          text: "Your prompt here"
        }]
      }]
    })
  }
);
```

## 错误处理最佳实践

### 多模型降级策略
实现自动降级以提高成功率：

```javascript
async function callGeminiWithFallback(prompt, apiKey) {
  const models = ['gemini-2.0-flash', 'gemini-1.5-flash', 'gemini-pro'];
  
  for (const model of models) {
    try {
      const response = await fetch(
        `https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=${apiKey}`,
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            contents: [{ parts: [{ text: prompt }] }]
          })
        }
      );
      
      if (response.ok) {
        const data = await response.json();
        return data.candidates[0].content.parts[0].text;
      }
    } catch (error) {
      console.warn(`Model ${model} failed, trying next...`);
    }
  }
  
  throw new Error('All models failed');
}
```

### 常见错误码处理
- `400` - 请求格式错误，检查JSON结构
- `403` - API Key无效或权限不足
- `404` - 模型不存在或API Key无权限访问
- `429` - 请求频率过高，需要限流
- `500` - 服务器内部错误，稍后重试

## API Key管理

### 获取API Key
1. 访问 [Google AI Studio](mdc:https:/aistudio.google.com/app/apikey)
2. 登录Google账号
3. 点击"Create API Key"
4. 复制生成的API Key

### 安全使用
- 永远不要在客户端代码中硬编码API Key
- 使用环境变量存储API Key
- 在生产环境中通过后端代理API调用

## 项目集成示例

参考项目文件：
- [script.js](mdc:每日工资入库展示/script.js) - 包含完整的Gemini API集成示例
- [index.html](mdc:每日工资入库展示/index.html) - 前端界面集成

### 在现有项目中集成
1. 安装依赖（如果使用SDK）：
   ```bash
   npm install @google/genai
   ```

2. 创建API调用函数：
   ```javascript
   async function callGemini(prompt, apiKey) {
     // 实现API调用逻辑
   }
   ```

3. 添加错误处理和用户反馈

## 最佳实践

### 提示工程
- 使用清晰、具体的指令
- 提供上下文信息
- 使用结构化的输出格式要求

### 性能优化
- 优先使用最新的模型版本（gemini-2.0-flash）
- 实现请求缓存避免重复调用
- 使用适当的超时设置

### 用户体验
- 显示加载状态
- 提供清晰的错误信息
- 实现重试机制

## 注意事项
- API有使用配额限制
- 某些地区可能无法访问
- 定期检查官方文档更新
- 遵守Google AI的使用政策


